// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terramirum/rental/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSendSessionRequest struct {
	FromRenter string `protobuf:"bytes,1,opt,name=FromRenter,proto3" json:"FromRenter,omitempty"`
	ToRenter   string `protobuf:"bytes,2,opt,name=ToRenter,proto3" json:"ToRenter,omitempty"`
	ClassId    string `protobuf:"bytes,3,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	NftId      string `protobuf:"bytes,4,opt,name=NftId,proto3" json:"NftId,omitempty"`
	SessionId  string `protobuf:"bytes,5,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
}

func (m *MsgSendSessionRequest) Reset()         { *m = MsgSendSessionRequest{} }
func (m *MsgSendSessionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSendSessionRequest) ProtoMessage()    {}
func (*MsgSendSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{0}
}
func (m *MsgSendSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendSessionRequest.Merge(m, src)
}
func (m *MsgSendSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendSessionRequest proto.InternalMessageInfo

func (m *MsgSendSessionRequest) GetFromRenter() string {
	if m != nil {
		return m.FromRenter
	}
	return ""
}

func (m *MsgSendSessionRequest) GetToRenter() string {
	if m != nil {
		return m.ToRenter
	}
	return ""
}

func (m *MsgSendSessionRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgSendSessionRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgSendSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type MsgSendSessionResponse struct {
}

func (m *MsgSendSessionResponse) Reset()         { *m = MsgSendSessionResponse{} }
func (m *MsgSendSessionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendSessionResponse) ProtoMessage()    {}
func (*MsgSendSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{1}
}
func (m *MsgSendSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendSessionResponse.Merge(m, src)
}
func (m *MsgSendSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendSessionResponse proto.InternalMessageInfo

type MsgRentGiveAccessRequest struct {
	Renter    string `protobuf:"bytes,1,opt,name=Renter,proto3" json:"Renter,omitempty"`
	NewRenter string `protobuf:"bytes,2,opt,name=NewRenter,proto3" json:"NewRenter,omitempty"`
	ClassId   string `protobuf:"bytes,3,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	NftId     string `protobuf:"bytes,4,opt,name=NftId,proto3" json:"NftId,omitempty"`
	SessionId string `protobuf:"bytes,5,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
}

func (m *MsgRentGiveAccessRequest) Reset()         { *m = MsgRentGiveAccessRequest{} }
func (m *MsgRentGiveAccessRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRentGiveAccessRequest) ProtoMessage()    {}
func (*MsgRentGiveAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{2}
}
func (m *MsgRentGiveAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRentGiveAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRentGiveAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRentGiveAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRentGiveAccessRequest.Merge(m, src)
}
func (m *MsgRentGiveAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRentGiveAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRentGiveAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRentGiveAccessRequest proto.InternalMessageInfo

func (m *MsgRentGiveAccessRequest) GetRenter() string {
	if m != nil {
		return m.Renter
	}
	return ""
}

func (m *MsgRentGiveAccessRequest) GetNewRenter() string {
	if m != nil {
		return m.NewRenter
	}
	return ""
}

func (m *MsgRentGiveAccessRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgRentGiveAccessRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgRentGiveAccessRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type MsgRentGiveAccessResponse struct {
}

func (m *MsgRentGiveAccessResponse) Reset()         { *m = MsgRentGiveAccessResponse{} }
func (m *MsgRentGiveAccessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRentGiveAccessResponse) ProtoMessage()    {}
func (*MsgRentGiveAccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{3}
}
func (m *MsgRentGiveAccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRentGiveAccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRentGiveAccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRentGiveAccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRentGiveAccessResponse.Merge(m, src)
}
func (m *MsgRentGiveAccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRentGiveAccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRentGiveAccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRentGiveAccessResponse proto.InternalMessageInfo

type MsgDeployNftRequest struct {
	// contract ofner of the class
	ContractOwner string `protobuf:"bytes,1,opt,name=ContractOwner,proto3" json:"ContractOwner,omitempty"`
	// name defines the human-readable name of the NFT classification. Optional
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	// symbol is an abbreviated name for nft classification. Optional
	Symbol string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	// description is a brief description of nft classification. Optional
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	// uri for the class metadata stored off chain. It can define schema for Class
	// and NFT `Data` attributes. Optional
	Uri string `protobuf:"bytes,5,opt,name=Uri,proto3" json:"Uri,omitempty"`
	// Any serilize Json data string
	Detail *Detail `protobuf:"bytes,6,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (m *MsgDeployNftRequest) Reset()         { *m = MsgDeployNftRequest{} }
func (m *MsgDeployNftRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeployNftRequest) ProtoMessage()    {}
func (*MsgDeployNftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{4}
}
func (m *MsgDeployNftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployNftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployNftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployNftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployNftRequest.Merge(m, src)
}
func (m *MsgDeployNftRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployNftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployNftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployNftRequest proto.InternalMessageInfo

func (m *MsgDeployNftRequest) GetContractOwner() string {
	if m != nil {
		return m.ContractOwner
	}
	return ""
}

func (m *MsgDeployNftRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgDeployNftRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgDeployNftRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgDeployNftRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MsgDeployNftRequest) GetDetail() *Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type MsgDeployNftResponse struct {
	ClassId string `protobuf:"bytes,1,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
}

func (m *MsgDeployNftResponse) Reset()         { *m = MsgDeployNftResponse{} }
func (m *MsgDeployNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeployNftResponse) ProtoMessage()    {}
func (*MsgDeployNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{5}
}
func (m *MsgDeployNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployNftResponse.Merge(m, src)
}
func (m *MsgDeployNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployNftResponse proto.InternalMessageInfo

func (m *MsgDeployNftResponse) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

type MsgMintNftRequest struct {
	ContractOwner string  `protobuf:"bytes,1,opt,name=ContractOwner,proto3" json:"ContractOwner,omitempty"`
	Reciever      string  `protobuf:"bytes,2,opt,name=Reciever,proto3" json:"Reciever,omitempty"`
	ClassId       string  `protobuf:"bytes,3,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	NftId         string  `protobuf:"bytes,4,opt,name=NftId,proto3" json:"NftId,omitempty"`
	Uri           string  `protobuf:"bytes,5,opt,name=Uri,proto3" json:"Uri,omitempty"`
	Detail        *Detail `protobuf:"bytes,6,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (m *MsgMintNftRequest) Reset()         { *m = MsgMintNftRequest{} }
func (m *MsgMintNftRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMintNftRequest) ProtoMessage()    {}
func (*MsgMintNftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{6}
}
func (m *MsgMintNftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintNftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintNftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintNftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintNftRequest.Merge(m, src)
}
func (m *MsgMintNftRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintNftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintNftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintNftRequest proto.InternalMessageInfo

func (m *MsgMintNftRequest) GetContractOwner() string {
	if m != nil {
		return m.ContractOwner
	}
	return ""
}

func (m *MsgMintNftRequest) GetReciever() string {
	if m != nil {
		return m.Reciever
	}
	return ""
}

func (m *MsgMintNftRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgMintNftRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgMintNftRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MsgMintNftRequest) GetDetail() *Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type MsgMintNftResponse struct {
	NftId string `protobuf:"bytes,2,opt,name=NftId,proto3" json:"NftId,omitempty"`
}

func (m *MsgMintNftResponse) Reset()         { *m = MsgMintNftResponse{} }
func (m *MsgMintNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintNftResponse) ProtoMessage()    {}
func (*MsgMintNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{7}
}
func (m *MsgMintNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintNftResponse.Merge(m, src)
}
func (m *MsgMintNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintNftResponse proto.InternalMessageInfo

func (m *MsgMintNftResponse) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type MsgBurnNftRequest struct {
	ContractOwner string `protobuf:"bytes,1,opt,name=ContractOwner,proto3" json:"ContractOwner,omitempty"`
	ClassId       string `protobuf:"bytes,2,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	NftId         string `protobuf:"bytes,3,opt,name=NftId,proto3" json:"NftId,omitempty"`
	Uri           string `protobuf:"bytes,4,opt,name=Uri,proto3" json:"Uri,omitempty"`
}

func (m *MsgBurnNftRequest) Reset()         { *m = MsgBurnNftRequest{} }
func (m *MsgBurnNftRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBurnNftRequest) ProtoMessage()    {}
func (*MsgBurnNftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{8}
}
func (m *MsgBurnNftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnNftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnNftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnNftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnNftRequest.Merge(m, src)
}
func (m *MsgBurnNftRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnNftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnNftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnNftRequest proto.InternalMessageInfo

func (m *MsgBurnNftRequest) GetContractOwner() string {
	if m != nil {
		return m.ContractOwner
	}
	return ""
}

func (m *MsgBurnNftRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgBurnNftRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgBurnNftRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type MsgBurnNftResponse struct {
	NftId string `protobuf:"bytes,2,opt,name=NftId,proto3" json:"NftId,omitempty"`
}

func (m *MsgBurnNftResponse) Reset()         { *m = MsgBurnNftResponse{} }
func (m *MsgBurnNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnNftResponse) ProtoMessage()    {}
func (*MsgBurnNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{9}
}
func (m *MsgBurnNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnNftResponse.Merge(m, src)
}
func (m *MsgBurnNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnNftResponse proto.InternalMessageInfo

func (m *MsgBurnNftResponse) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type MsgMintRentRequest struct {
	ContractOwner string `protobuf:"bytes,1,opt,name=ContractOwner,proto3" json:"ContractOwner,omitempty"`
	ClassId       string `protobuf:"bytes,2,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	NftId         string `protobuf:"bytes,3,opt,name=NftId,proto3" json:"NftId,omitempty"`
	Renter        string `protobuf:"bytes,4,opt,name=Renter,proto3" json:"Renter,omitempty"`
	// YYYYMMDDHHMM
	StartDate int64 `protobuf:"varint,5,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	// YYYYMMDDHHMM
	EndDate int64 `protobuf:"varint,6,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
}

func (m *MsgMintRentRequest) Reset()         { *m = MsgMintRentRequest{} }
func (m *MsgMintRentRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMintRentRequest) ProtoMessage()    {}
func (*MsgMintRentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{10}
}
func (m *MsgMintRentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintRentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintRentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintRentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintRentRequest.Merge(m, src)
}
func (m *MsgMintRentRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintRentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintRentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintRentRequest proto.InternalMessageInfo

func (m *MsgMintRentRequest) GetContractOwner() string {
	if m != nil {
		return m.ContractOwner
	}
	return ""
}

func (m *MsgMintRentRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgMintRentRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgMintRentRequest) GetRenter() string {
	if m != nil {
		return m.Renter
	}
	return ""
}

func (m *MsgMintRentRequest) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *MsgMintRentRequest) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

type MsgMintRentResponse struct {
}

func (m *MsgMintRentResponse) Reset()         { *m = MsgMintRentResponse{} }
func (m *MsgMintRentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintRentResponse) ProtoMessage()    {}
func (*MsgMintRentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{11}
}
func (m *MsgMintRentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintRentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintRentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintRentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintRentResponse.Merge(m, src)
}
func (m *MsgMintRentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintRentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintRentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintRentResponse proto.InternalMessageInfo

type MsgBurnRentRequest struct {
	ContractOwner string `protobuf:"bytes,1,opt,name=ContractOwner,proto3" json:"ContractOwner,omitempty"`
	ClassId       string `protobuf:"bytes,2,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	NftId         string `protobuf:"bytes,3,opt,name=NftId,proto3" json:"NftId,omitempty"`
	SessionId     string `protobuf:"bytes,4,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
}

func (m *MsgBurnRentRequest) Reset()         { *m = MsgBurnRentRequest{} }
func (m *MsgBurnRentRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBurnRentRequest) ProtoMessage()    {}
func (*MsgBurnRentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{12}
}
func (m *MsgBurnRentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnRentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnRentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnRentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnRentRequest.Merge(m, src)
}
func (m *MsgBurnRentRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnRentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnRentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnRentRequest proto.InternalMessageInfo

func (m *MsgBurnRentRequest) GetContractOwner() string {
	if m != nil {
		return m.ContractOwner
	}
	return ""
}

func (m *MsgBurnRentRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgBurnRentRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgBurnRentRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type MsgBurnRentResponse struct {
}

func (m *MsgBurnRentResponse) Reset()         { *m = MsgBurnRentResponse{} }
func (m *MsgBurnRentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnRentResponse) ProtoMessage()    {}
func (*MsgBurnRentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{13}
}
func (m *MsgBurnRentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnRentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnRentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnRentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnRentResponse.Merge(m, src)
}
func (m *MsgBurnRentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnRentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnRentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnRentResponse proto.InternalMessageInfo

type MsgAccessNftRequest struct {
	// contract ofner of the class
	Renter string `protobuf:"bytes,1,opt,name=Renter,proto3" json:"Renter,omitempty"`
	// class definition to save
	ClassId string `protobuf:"bytes,2,opt,name=ClassId,proto3" json:"ClassId,omitempty"`
	NftId   string `protobuf:"bytes,3,opt,name=NftId,proto3" json:"NftId,omitempty"`
}

func (m *MsgAccessNftRequest) Reset()         { *m = MsgAccessNftRequest{} }
func (m *MsgAccessNftRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAccessNftRequest) ProtoMessage()    {}
func (*MsgAccessNftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{14}
}
func (m *MsgAccessNftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccessNftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccessNftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccessNftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccessNftRequest.Merge(m, src)
}
func (m *MsgAccessNftRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccessNftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccessNftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccessNftRequest proto.InternalMessageInfo

func (m *MsgAccessNftRequest) GetRenter() string {
	if m != nil {
		return m.Renter
	}
	return ""
}

func (m *MsgAccessNftRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgAccessNftRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

// this line is used by starport scaffolding #
type NftRent struct {
	StartDate int64  `protobuf:"varint,1,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate   int64  `protobuf:"varint,2,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	SessionId string `protobuf:"bytes,3,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
}

func (m *NftRent) Reset()         { *m = NftRent{} }
func (m *NftRent) String() string { return proto.CompactTextString(m) }
func (*NftRent) ProtoMessage()    {}
func (*NftRent) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{15}
}
func (m *NftRent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftRent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftRent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftRent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftRent.Merge(m, src)
}
func (m *NftRent) XXX_Size() int {
	return m.Size()
}
func (m *NftRent) XXX_DiscardUnknown() {
	xxx_messageInfo_NftRent.DiscardUnknown(m)
}

var xxx_messageInfo_NftRent proto.InternalMessageInfo

func (m *NftRent) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *NftRent) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *NftRent) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type MsgAccessNftResponse struct {
	HasAccess bool       `protobuf:"varint,1,opt,name=HasAccess,proto3" json:"HasAccess,omitempty"`
	NftRents  []*NftRent `protobuf:"bytes,2,rep,name=NftRents,proto3" json:"NftRents,omitempty"`
}

func (m *MsgAccessNftResponse) Reset()         { *m = MsgAccessNftResponse{} }
func (m *MsgAccessNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAccessNftResponse) ProtoMessage()    {}
func (*MsgAccessNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{16}
}
func (m *MsgAccessNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccessNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccessNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccessNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccessNftResponse.Merge(m, src)
}
func (m *MsgAccessNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccessNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccessNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccessNftResponse proto.InternalMessageInfo

func (m *MsgAccessNftResponse) GetHasAccess() bool {
	if m != nil {
		return m.HasAccess
	}
	return false
}

func (m *MsgAccessNftResponse) GetNftRents() []*NftRent {
	if m != nil {
		return m.NftRents
	}
	return nil
}

type Detail struct {
	JsonData        string `protobuf:"bytes,1,opt,name=JsonData,proto3" json:"JsonData,omitempty"`
	MinDurationUnit int32  `protobuf:"varint,2,opt,name=MinDurationUnit,proto3" json:"MinDurationUnit,omitempty"`
}

func (m *Detail) Reset()         { *m = Detail{} }
func (m *Detail) String() string { return proto.CompactTextString(m) }
func (*Detail) ProtoMessage()    {}
func (*Detail) Descriptor() ([]byte, []int) {
	return fileDescriptor_11560e601854eaa0, []int{17}
}
func (m *Detail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Detail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Detail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Detail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Detail.Merge(m, src)
}
func (m *Detail) XXX_Size() int {
	return m.Size()
}
func (m *Detail) XXX_DiscardUnknown() {
	xxx_messageInfo_Detail.DiscardUnknown(m)
}

var xxx_messageInfo_Detail proto.InternalMessageInfo

func (m *Detail) GetJsonData() string {
	if m != nil {
		return m.JsonData
	}
	return ""
}

func (m *Detail) GetMinDurationUnit() int32 {
	if m != nil {
		return m.MinDurationUnit
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgSendSessionRequest)(nil), "terramirum.rental.MsgSendSessionRequest")
	proto.RegisterType((*MsgSendSessionResponse)(nil), "terramirum.rental.MsgSendSessionResponse")
	proto.RegisterType((*MsgRentGiveAccessRequest)(nil), "terramirum.rental.MsgRentGiveAccessRequest")
	proto.RegisterType((*MsgRentGiveAccessResponse)(nil), "terramirum.rental.MsgRentGiveAccessResponse")
	proto.RegisterType((*MsgDeployNftRequest)(nil), "terramirum.rental.MsgDeployNftRequest")
	proto.RegisterType((*MsgDeployNftResponse)(nil), "terramirum.rental.MsgDeployNftResponse")
	proto.RegisterType((*MsgMintNftRequest)(nil), "terramirum.rental.MsgMintNftRequest")
	proto.RegisterType((*MsgMintNftResponse)(nil), "terramirum.rental.MsgMintNftResponse")
	proto.RegisterType((*MsgBurnNftRequest)(nil), "terramirum.rental.MsgBurnNftRequest")
	proto.RegisterType((*MsgBurnNftResponse)(nil), "terramirum.rental.MsgBurnNftResponse")
	proto.RegisterType((*MsgMintRentRequest)(nil), "terramirum.rental.MsgMintRentRequest")
	proto.RegisterType((*MsgMintRentResponse)(nil), "terramirum.rental.MsgMintRentResponse")
	proto.RegisterType((*MsgBurnRentRequest)(nil), "terramirum.rental.MsgBurnRentRequest")
	proto.RegisterType((*MsgBurnRentResponse)(nil), "terramirum.rental.MsgBurnRentResponse")
	proto.RegisterType((*MsgAccessNftRequest)(nil), "terramirum.rental.MsgAccessNftRequest")
	proto.RegisterType((*NftRent)(nil), "terramirum.rental.NftRent")
	proto.RegisterType((*MsgAccessNftResponse)(nil), "terramirum.rental.MsgAccessNftResponse")
	proto.RegisterType((*Detail)(nil), "terramirum.rental.Detail")
}

func init() { proto.RegisterFile("terramirum/rental/tx.proto", fileDescriptor_11560e601854eaa0) }

var fileDescriptor_11560e601854eaa0 = []byte{
	// 943 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0xda, 0x8e, 0x63, 0xbf, 0x16, 0x02, 0x0f, 0x6d, 0xd9, 0x2c, 0x91, 0x6b, 0xad, 0x4a,
	0x31, 0x2e, 0xf2, 0x36, 0x41, 0xe2, 0x90, 0x1b, 0xad, 0x0b, 0x04, 0xc9, 0x46, 0x5a, 0x53, 0x0e,
	0xa8, 0x12, 0x5a, 0xdb, 0xe3, 0x65, 0x25, 0xef, 0x8c, 0xd9, 0x19, 0xa7, 0xcd, 0x0d, 0x38, 0x01,
	0x27, 0x7e, 0x08, 0x87, 0x9c, 0xf9, 0x05, 0xdc, 0xa8, 0xc4, 0x85, 0x23, 0x4a, 0x0e, 0xb9, 0xf0,
	0x0f, 0xb8, 0x54, 0x33, 0x3b, 0xde, 0x2f, 0xaf, 0x1d, 0x5b, 0x6a, 0x2e, 0xf6, 0xbe, 0x1f, 0x33,
	0xef, 0xfb, 0x3c, 0x33, 0xf3, 0xec, 0x2c, 0x18, 0x1c, 0x07, 0x81, 0xe3, 0x7b, 0xc1, 0xdc, 0xb7,
	0x02, 0x4c, 0xb8, 0x33, 0xb5, 0xf8, 0x8b, 0xce, 0x2c, 0xa0, 0x9c, 0xa2, 0x7a, 0x1c, 0xeb, 0x84,
	0x31, 0xe3, 0xae, 0x4b, 0xa9, 0x3b, 0xc5, 0x96, 0x4c, 0x18, 0xce, 0x27, 0x16, 0xf7, 0x7c, 0xcc,
	0xb8, 0xe3, 0xcf, 0xc2, 0x31, 0xc6, 0x3b, 0x23, 0xca, 0x7c, 0xca, 0x2c, 0x9f, 0xb9, 0xd6, 0xe9,
	0xa1, 0xf8, 0x53, 0x81, 0xba, 0xe3, 0x7b, 0x84, 0x5a, 0xf2, 0x37, 0x74, 0x99, 0x7f, 0x6b, 0x70,
	0xbb, 0xc7, 0xdc, 0x01, 0x26, 0xe3, 0x01, 0x66, 0xcc, 0xa3, 0xc4, 0xc6, 0xdf, 0xcf, 0x31, 0xe3,
	0xa8, 0x01, 0xf0, 0x69, 0x40, 0x7d, 0x1b, 0x13, 0x8e, 0x03, 0x5d, 0x6b, 0x6a, 0xad, 0xaa, 0x9d,
	0xf0, 0x20, 0x03, 0x2a, 0x5f, 0x51, 0x15, 0x2d, 0xc8, 0x68, 0x64, 0x23, 0x1d, 0xf6, 0x1e, 0x4f,
	0x1d, 0xc6, 0x4e, 0xc6, 0x7a, 0x51, 0x86, 0x16, 0x26, 0xba, 0x05, 0xbb, 0xfd, 0x09, 0x3f, 0x19,
	0xeb, 0x25, 0xe9, 0x0f, 0x0d, 0x74, 0x00, 0x55, 0x55, 0xfd, 0x64, 0xac, 0xef, 0xca, 0x48, 0xec,
	0x38, 0x7e, 0xf8, 0xd3, 0xd5, 0x79, 0x3b, 0x51, 0xfa, 0xd7, 0xab, 0xf3, 0xf6, 0x81, 0x22, 0x2a,
	0xb7, 0x77, 0x53, 0x87, 0x3b, 0xd9, 0x00, 0x9b, 0x51, 0xc2, 0xb0, 0xf9, 0x97, 0x06, 0x7a, 0x8f,
	0xb9, 0x62, 0xa2, 0xcf, 0xbc, 0x53, 0xfc, 0xc9, 0x68, 0x84, 0x19, 0x5b, 0x40, 0xbe, 0x03, 0xe5,
	0x14, 0x5c, 0x65, 0x89, 0xf6, 0xfa, 0xf8, 0x79, 0x0a, 0x6b, 0xec, 0x78, 0xcd, 0x60, 0x2d, 0x01,
	0xb6, 0x1c, 0x03, 0xbd, 0x1b, 0x03, 0xcd, 0x6d, 0xda, 0x7c, 0x17, 0xf6, 0x73, 0x62, 0x0a, 0xee,
	0x8f, 0x05, 0x78, 0xbb, 0xc7, 0xdc, 0x2e, 0x9e, 0x4d, 0xe9, 0x59, 0x7f, 0xc2, 0x17, 0x48, 0xef,
	0xc1, 0x1b, 0x8f, 0x29, 0xe1, 0x81, 0x33, 0xe2, 0x5f, 0x3e, 0x27, 0x11, 0xe0, 0xb4, 0x13, 0x21,
	0x28, 0xf5, 0x1d, 0x1f, 0x2b, 0xc8, 0xf2, 0x59, 0x70, 0x34, 0x38, 0xf3, 0x87, 0x74, 0xaa, 0xc0,
	0x2a, 0x0b, 0x35, 0xa1, 0xd6, 0xc5, 0x6c, 0x14, 0x78, 0x33, 0xee, 0x51, 0xa2, 0x10, 0x27, 0x5d,
	0xe8, 0x2d, 0x28, 0x3e, 0x0d, 0x3c, 0x85, 0x58, 0x3c, 0xa2, 0x43, 0x28, 0x77, 0x31, 0x77, 0xbc,
	0xa9, 0x5e, 0x6e, 0x6a, 0xad, 0xda, 0xd1, 0x7e, 0x67, 0x69, 0xb7, 0x77, 0xc2, 0x04, 0x5b, 0x25,
	0x1e, 0x1f, 0x0a, 0x7a, 0xd2, 0x6d, 0x0a, 0x96, 0x8c, 0x98, 0xa5, 0x2c, 0x56, 0xf3, 0x21, 0xdc,
	0x4a, 0xbb, 0x43, 0x6e, 0x92, 0xeb, 0xa6, 0xa5, 0xd6, 0xcd, 0xfc, 0x5f, 0x83, 0x7a, 0x8f, 0xb9,
	0x3d, 0x8f, 0xf0, 0xad, 0x39, 0x33, 0xa0, 0x62, 0xe3, 0x91, 0x87, 0x4f, 0xe3, 0x63, 0xb1, 0xb0,
	0xb7, 0xde, 0x29, 0xaf, 0x85, 0x31, 0x2b, 0x9f, 0x31, 0x3d, 0x66, 0x2c, 0x8d, 0xd3, 0x6c, 0x03,
	0x4a, 0x3a, 0x15, 0x5b, 0x51, 0x87, 0x85, 0x44, 0x87, 0xe6, 0xef, 0x21, 0x53, 0x8f, 0xe6, 0x01,
	0xd9, 0x9a, 0xa9, 0x04, 0x1b, 0x85, 0x15, 0x6c, 0x14, 0x73, 0xd8, 0x28, 0x45, 0x6c, 0x6c, 0x00,
	0x2d, 0xdd, 0x98, 0x82, 0x16, 0x39, 0xd7, 0x42, 0xfb, 0x4f, 0x8b, 0x78, 0x10, 0x87, 0xeb, 0x66,
	0xb1, 0xc5, 0xca, 0x53, 0xca, 0x2a, 0xcf, 0x80, 0x3b, 0x01, 0xef, 0x3a, 0x1c, 0xcb, 0x7d, 0x50,
	0xb4, 0x63, 0x87, 0xa8, 0xf2, 0x84, 0x8c, 0x65, 0xac, 0x2c, 0x63, 0x0b, 0x33, 0x94, 0xcc, 0x65,
	0x66, 0xf6, 0xd3, 0x8b, 0x9e, 0xc0, 0x65, 0xde, 0x96, 0x42, 0x11, 0x7b, 0x95, 0x80, 0xfc, 0xa1,
	0x45, 0x94, 0xdd, 0x3c, 0x0b, 0x29, 0x65, 0x2c, 0xe5, 0xbe, 0x06, 0xd6, 0x62, 0xca, 0x74, 0xa9,
	0x30, 0xc5, 0x5e, 0x85, 0xe9, 0x17, 0x4d, 0xfa, 0x43, 0xa9, 0x4c, 0x6c, 0xdb, 0x55, 0xf2, 0xbf,
	0x25, 0x8c, 0xe3, 0x76, 0x46, 0xc2, 0x13, 0xe2, 0x94, 0xad, 0x69, 0x7e, 0x0b, 0x7b, 0xd2, 0x22,
	0x3c, 0xbd, 0xd6, 0xda, 0x9a, 0xb5, 0x2e, 0xa4, 0xd6, 0x3a, 0xcd, 0x5a, 0x31, 0xc3, 0x9a, 0x39,
	0x95, 0xea, 0x97, 0xa8, 0xab, 0x36, 0xfd, 0x01, 0x54, 0x3f, 0x77, 0x58, 0xe8, 0x97, 0xd5, 0x2a,
	0x76, 0xec, 0x40, 0x1f, 0x43, 0x45, 0xb5, 0xc5, 0xf4, 0x42, 0xb3, 0xd8, 0xaa, 0x1d, 0x19, 0x39,
	0x4a, 0xa3, 0x52, 0xec, 0x28, 0xd7, 0xec, 0x2f, 0xf4, 0x49, 0xe8, 0xe0, 0x17, 0x8c, 0x92, 0xae,
	0xc3, 0x1d, 0x45, 0x67, 0x64, 0xa3, 0x16, 0xbc, 0xd9, 0xf3, 0x48, 0x77, 0x1e, 0x38, 0xe2, 0xc5,
	0xf0, 0x94, 0x78, 0x5c, 0x62, 0xda, 0xb5, 0xb3, 0xee, 0xa3, 0x9f, 0xcb, 0x50, 0xec, 0x31, 0x17,
	0x3d, 0x83, 0x6a, 0x24, 0xe0, 0xe8, 0x7e, 0x4e, 0x2b, 0x39, 0xc2, 0x6f, 0xbc, 0x7f, 0x6d, 0x9e,
	0xe2, 0xe2, 0x6b, 0xd8, 0x53, 0x72, 0x87, 0xee, 0xe5, 0x8f, 0x49, 0x4b, 0xa4, 0xf1, 0xde, 0x35,
	0x59, 0xf1, 0xbc, 0x4a, 0x6b, 0x56, 0xcd, 0x9b, 0xd6, 0xa7, 0x55, 0xf3, 0x66, 0x05, 0xeb, 0x19,
	0xd4, 0x04, 0xdd, 0xfd, 0x09, 0x17, 0x15, 0xd1, 0x9a, 0x6e, 0x12, 0xa7, 0xc1, 0xb8, 0x7f, 0x5d,
	0xda, 0xd2, 0xec, 0xa2, 0x2e, 0x5a, 0xd3, 0xd3, 0x06, 0xb3, 0x67, 0x0f, 0x9f, 0x58, 0xc9, 0xfe,
	0x84, 0xab, 0x6d, 0xb6, 0x62, 0x50, 0xf6, 0x94, 0xac, 0x5a, 0xc9, 0xe5, 0x5d, 0x4d, 0xa0, 0xae,
	0x7a, 0x8f, 0x2f, 0x43, 0xe8, 0x41, 0xfe, 0xe8, 0xdc, 0xeb, 0x94, 0xf1, 0xe1, 0x66, 0xc9, 0xaa,
	0xde, 0x10, 0x6a, 0x89, 0x5b, 0x26, 0x6a, 0xe5, 0x0f, 0x5e, 0xbe, 0xa1, 0x1a, 0x1f, 0x6c, 0x90,
	0x19, 0xd6, 0x30, 0x76, 0x7f, 0xb8, 0x3a, 0x6f, 0x6b, 0x8f, 0x9e, 0xfc, 0x79, 0xd1, 0xd0, 0x5e,
	0x5e, 0x34, 0xb4, 0x7f, 0x2f, 0x1a, 0xda, 0x6f, 0x97, 0x8d, 0x9d, 0x97, 0x97, 0x8d, 0x9d, 0x7f,
	0x2e, 0x1b, 0x3b, 0xdf, 0x3c, 0x70, 0x3d, 0xfe, 0xdd, 0x7c, 0xd8, 0x19, 0x51, 0xdf, 0x4a, 0x7c,
	0x4a, 0xc8, 0xdf, 0xb1, 0xf5, 0x22, 0xfa, 0xa6, 0x38, 0x9b, 0x61, 0x36, 0x2c, 0xcb, 0x7b, 0xff,
	0x47, 0xaf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xab, 0x2b, 0xc8, 0x75, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Save an nft class
	DeployNft(ctx context.Context, in *MsgDeployNftRequest, opts ...grpc.CallOption) (*MsgDeployNftResponse, error)
	MintNft(ctx context.Context, in *MsgMintNftRequest, opts ...grpc.CallOption) (*MsgMintNftResponse, error)
	BurnNft(ctx context.Context, in *MsgBurnNftRequest, opts ...grpc.CallOption) (*MsgBurnNftResponse, error)
	RentNftMint(ctx context.Context, in *MsgMintRentRequest, opts ...grpc.CallOption) (*MsgMintRentResponse, error)
	RentNftBurn(ctx context.Context, in *MsgBurnRentRequest, opts ...grpc.CallOption) (*MsgBurnRentResponse, error)
	NftAccess(ctx context.Context, in *MsgAccessNftRequest, opts ...grpc.CallOption) (*MsgAccessNftResponse, error)
	RentNftGiveAccess(ctx context.Context, in *MsgRentGiveAccessRequest, opts ...grpc.CallOption) (*MsgRentGiveAccessResponse, error)
	SendSession(ctx context.Context, in *MsgSendSessionRequest, opts ...grpc.CallOption) (*MsgSendSessionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DeployNft(ctx context.Context, in *MsgDeployNftRequest, opts ...grpc.CallOption) (*MsgDeployNftResponse, error) {
	out := new(MsgDeployNftResponse)
	err := c.cc.Invoke(ctx, "/terramirum.rental.Msg/DeployNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintNft(ctx context.Context, in *MsgMintNftRequest, opts ...grpc.CallOption) (*MsgMintNftResponse, error) {
	out := new(MsgMintNftResponse)
	err := c.cc.Invoke(ctx, "/terramirum.rental.Msg/MintNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnNft(ctx context.Context, in *MsgBurnNftRequest, opts ...grpc.CallOption) (*MsgBurnNftResponse, error) {
	out := new(MsgBurnNftResponse)
	err := c.cc.Invoke(ctx, "/terramirum.rental.Msg/BurnNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RentNftMint(ctx context.Context, in *MsgMintRentRequest, opts ...grpc.CallOption) (*MsgMintRentResponse, error) {
	out := new(MsgMintRentResponse)
	err := c.cc.Invoke(ctx, "/terramirum.rental.Msg/RentNftMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RentNftBurn(ctx context.Context, in *MsgBurnRentRequest, opts ...grpc.CallOption) (*MsgBurnRentResponse, error) {
	out := new(MsgBurnRentResponse)
	err := c.cc.Invoke(ctx, "/terramirum.rental.Msg/RentNftBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NftAccess(ctx context.Context, in *MsgAccessNftRequest, opts ...grpc.CallOption) (*MsgAccessNftResponse, error) {
	out := new(MsgAccessNftResponse)
	err := c.cc.Invoke(ctx, "/terramirum.rental.Msg/NftAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RentNftGiveAccess(ctx context.Context, in *MsgRentGiveAccessRequest, opts ...grpc.CallOption) (*MsgRentGiveAccessResponse, error) {
	out := new(MsgRentGiveAccessResponse)
	err := c.cc.Invoke(ctx, "/terramirum.rental.Msg/RentNftGiveAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendSession(ctx context.Context, in *MsgSendSessionRequest, opts ...grpc.CallOption) (*MsgSendSessionResponse, error) {
	out := new(MsgSendSessionResponse)
	err := c.cc.Invoke(ctx, "/terramirum.rental.Msg/SendSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Save an nft class
	DeployNft(context.Context, *MsgDeployNftRequest) (*MsgDeployNftResponse, error)
	MintNft(context.Context, *MsgMintNftRequest) (*MsgMintNftResponse, error)
	BurnNft(context.Context, *MsgBurnNftRequest) (*MsgBurnNftResponse, error)
	RentNftMint(context.Context, *MsgMintRentRequest) (*MsgMintRentResponse, error)
	RentNftBurn(context.Context, *MsgBurnRentRequest) (*MsgBurnRentResponse, error)
	NftAccess(context.Context, *MsgAccessNftRequest) (*MsgAccessNftResponse, error)
	RentNftGiveAccess(context.Context, *MsgRentGiveAccessRequest) (*MsgRentGiveAccessResponse, error)
	SendSession(context.Context, *MsgSendSessionRequest) (*MsgSendSessionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DeployNft(ctx context.Context, req *MsgDeployNftRequest) (*MsgDeployNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployNft not implemented")
}
func (*UnimplementedMsgServer) MintNft(ctx context.Context, req *MsgMintNftRequest) (*MsgMintNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintNft not implemented")
}
func (*UnimplementedMsgServer) BurnNft(ctx context.Context, req *MsgBurnNftRequest) (*MsgBurnNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnNft not implemented")
}
func (*UnimplementedMsgServer) RentNftMint(ctx context.Context, req *MsgMintRentRequest) (*MsgMintRentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentNftMint not implemented")
}
func (*UnimplementedMsgServer) RentNftBurn(ctx context.Context, req *MsgBurnRentRequest) (*MsgBurnRentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentNftBurn not implemented")
}
func (*UnimplementedMsgServer) NftAccess(ctx context.Context, req *MsgAccessNftRequest) (*MsgAccessNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftAccess not implemented")
}
func (*UnimplementedMsgServer) RentNftGiveAccess(ctx context.Context, req *MsgRentGiveAccessRequest) (*MsgRentGiveAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentNftGiveAccess not implemented")
}
func (*UnimplementedMsgServer) SendSession(ctx context.Context, req *MsgSendSessionRequest) (*MsgSendSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSession not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DeployNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeployNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeployNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terramirum.rental.Msg/DeployNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeployNft(ctx, req.(*MsgDeployNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terramirum.rental.Msg/MintNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintNft(ctx, req.(*MsgMintNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terramirum.rental.Msg/BurnNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnNft(ctx, req.(*MsgBurnNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RentNftMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintRentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RentNftMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terramirum.rental.Msg/RentNftMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RentNftMint(ctx, req.(*MsgMintRentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RentNftBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnRentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RentNftBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terramirum.rental.Msg/RentNftBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RentNftBurn(ctx, req.(*MsgBurnRentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NftAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAccessNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NftAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terramirum.rental.Msg/NftAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NftAccess(ctx, req.(*MsgAccessNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RentNftGiveAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRentGiveAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RentNftGiveAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terramirum.rental.Msg/RentNftGiveAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RentNftGiveAccess(ctx, req.(*MsgRentGiveAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terramirum.rental.Msg/SendSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendSession(ctx, req.(*MsgSendSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "terramirum.rental.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployNft",
			Handler:    _Msg_DeployNft_Handler,
		},
		{
			MethodName: "MintNft",
			Handler:    _Msg_MintNft_Handler,
		},
		{
			MethodName: "BurnNft",
			Handler:    _Msg_BurnNft_Handler,
		},
		{
			MethodName: "RentNftMint",
			Handler:    _Msg_RentNftMint_Handler,
		},
		{
			MethodName: "RentNftBurn",
			Handler:    _Msg_RentNftBurn_Handler,
		},
		{
			MethodName: "NftAccess",
			Handler:    _Msg_NftAccess_Handler,
		},
		{
			MethodName: "RentNftGiveAccess",
			Handler:    _Msg_RentNftGiveAccess_Handler,
		},
		{
			MethodName: "SendSession",
			Handler:    _Msg_SendSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terramirum/rental/tx.proto",
}

func (m *MsgSendSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToRenter) > 0 {
		i -= len(m.ToRenter)
		copy(dAtA[i:], m.ToRenter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToRenter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromRenter) > 0 {
		i -= len(m.FromRenter)
		copy(dAtA[i:], m.FromRenter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromRenter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRentGiveAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRentGiveAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRentGiveAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewRenter) > 0 {
		i -= len(m.NewRenter)
		copy(dAtA[i:], m.NewRenter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewRenter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Renter) > 0 {
		i -= len(m.Renter)
		copy(dAtA[i:], m.Renter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Renter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRentGiveAccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRentGiveAccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRentGiveAccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeployNftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployNftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployNftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Detail != nil {
		{
			size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractOwner) > 0 {
		i -= len(m.ContractOwner)
		copy(dAtA[i:], m.ContractOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeployNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintNftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintNftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintNftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Detail != nil {
		{
			size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reciever) > 0 {
		i -= len(m.Reciever)
		copy(dAtA[i:], m.Reciever)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reciever)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractOwner) > 0 {
		i -= len(m.ContractOwner)
		copy(dAtA[i:], m.ContractOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnNftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnNftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnNftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractOwner) > 0 {
		i -= len(m.ContractOwner)
		copy(dAtA[i:], m.ContractOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintRentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintRentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintRentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndDate))
		i--
		dAtA[i] = 0x30
	}
	if m.StartDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Renter) > 0 {
		i -= len(m.Renter)
		copy(dAtA[i:], m.Renter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Renter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractOwner) > 0 {
		i -= len(m.ContractOwner)
		copy(dAtA[i:], m.ContractOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintRentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintRentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintRentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnRentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnRentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnRentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractOwner) > 0 {
		i -= len(m.ContractOwner)
		copy(dAtA[i:], m.ContractOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnRentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnRentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnRentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAccessNftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccessNftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccessNftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Renter) > 0 {
		i -= len(m.Renter)
		copy(dAtA[i:], m.Renter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Renter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftRent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftRent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftRent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EndDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndDate))
		i--
		dAtA[i] = 0x10
	}
	if m.StartDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAccessNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccessNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccessNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftRents) > 0 {
		for iNdEx := len(m.NftRents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftRents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.HasAccess {
		i--
		if m.HasAccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Detail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Detail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Detail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinDurationUnit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinDurationUnit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.JsonData) > 0 {
		i -= len(m.JsonData)
		copy(dAtA[i:], m.JsonData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.JsonData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromRenter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToRenter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRentGiveAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Renter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewRenter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRentGiveAccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeployNftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeployNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintNftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reciever)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnNftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintRentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Renter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovTx(uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		n += 1 + sovTx(uint64(m.EndDate))
	}
	return n
}

func (m *MsgMintRentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnRentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnRentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAccessNftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Renter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *NftRent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != 0 {
		n += 1 + sovTx(uint64(m.StartDate))
	}
	if m.EndDate != 0 {
		n += 1 + sovTx(uint64(m.EndDate))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAccessNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasAccess {
		n += 2
	}
	if len(m.NftRents) > 0 {
		for _, e := range m.NftRents {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *Detail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinDurationUnit != 0 {
		n += 1 + sovTx(uint64(m.MinDurationUnit))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromRenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromRenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToRenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToRenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRentGiveAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRentGiveAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRentGiveAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Renter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Renter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRentGiveAccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRentGiveAccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRentGiveAccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployNftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployNftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployNftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &Detail{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintNftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintNftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintNftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reciever", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reciever = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &Detail{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnNftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnNftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnNftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintRentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintRentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintRentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Renter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Renter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintRentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintRentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintRentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnRentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnRentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnRentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnRentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnRentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnRentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccessNftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccessNftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccessNftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Renter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Renter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftRent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftRent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftRent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccessNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccessNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccessNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasAccess = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftRents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftRents = append(m.NftRents, &NftRent{})
			if err := m.NftRents[len(m.NftRents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Detail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDurationUnit", wireType)
			}
			m.MinDurationUnit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDurationUnit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
