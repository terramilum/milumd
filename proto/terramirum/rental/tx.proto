syntax = "proto3";
package terramirum.rental;

import "google/protobuf/timestamp.proto";
import "cosmos/nft/v1beta1/nft.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/terramirum/mirumd/x/rental/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Save an nft class
  rpc DeployNft(MsgDeployNftRequest) returns (MsgDeployNftResponse);
  rpc MintNft(MsgDeployNftRequest) returns (MsgDeployNftResponse);
  rpc BurnNft(MsgDeployNftRequest) returns (MsgDeployNftResponse);
  rpc RentNftMint(MsgDeployNftRequest) returns (MsgDeployNftResponse);
  rpc RentNftBurn(MsgDeployNftRequest) returns (MsgDeployNftResponse);
  rpc NftAccess(MsgAccessNftRequest) returns (MsgAccessNftResponse);
}

message MsgDeployNftRequest {
  option (cosmos.msg.v1.signer) = "ContractOwner";
  // contract ofner of the class
  string ContractOwner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // class definition to save
  Class Class = 2;
}

message MsgDeployNftResponse { string ClassId = 1; }

message MsgMintNftRequest {
  option (cosmos.msg.v1.signer) = "ContractOwner";

  string ContractOwner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  NFT Nft = 2;
}

message MsgMintNftResponse {
  string ClassId = 1;
  string NftId = 2;
}

message MsgRentNftRequest {
  option (cosmos.msg.v1.signer) = "ContractOwner";

  string ContractOwner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string ClassId = 2;
  string NftId = 3;
  google.protobuf.Timestamp StartDate = 4;
  google.protobuf.Timestamp EndDate = 5;
}

message MsgRentNftResponse {}

message MsgAccessNftRequest {
  option (cosmos.msg.v1.signer) = "sender";
  // contract ofner of the class
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // class definition to save
  string ClassId = 2;
  string NftId = 3;
}

message MsgAccessNftResponse {}