syntax = "proto3";
package terramirum.rental;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "terramirum/rental/params.proto";
import "terramirum/rental/tx.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/terramirum/mirumd/x/rental/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mirumd/rental/params";
  }

  rpc Sessions(QuerySessionRequest) returns (QuerySessionResponse) {
    option (google.api.http).get =
        "/mirumd/rental/session/{ClassId}/{NftId}/{Renter}";
  }

  rpc Renters(QueryRenterRequest) returns (QueryRenterResponse) {
    option (google.api.http).get =
        "/mirumd/rental/access/{ClassId}/{NftId}/{SessionId}";
  }

  rpc Classes(QueryClassRequest) returns (QueryClassResponse) {
    option (google.api.http).get = "/mirumd/rental/class/{ContractOwner}";
  }

  rpc Nfts(QueryNftRequest) returns (QueryNftResponse) {
    option (google.api.http).get = "/mirumd/rental/nft/{ClassId}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QuerySessionRequest {
  string ClassId = 1;
  string NftId = 2;
  string Renter = 3;
  string SessionId = 4;
}

message SessionDetail {
  NftRent NftRent = 1;
  string Renter = 2;
  string ClassId = 3;
  string NftId = 4;
}

message QuerySessionResponse { repeated SessionDetail SessionDetail = 1; }

message QueryRenterRequest {
  string ClassId = 1;
  string NftId = 2;
  string SessionId = 3;
}

message QueryRenterResponse { repeated string Renter = 1; }

message QueryClassRequest { string ContractOwner = 1; }

message QueryClassResponse { repeated NftClass NftClass = 1; }

message QueryNftRequest { string ClassId = 1; }

message QueryNftResponse { repeated NftDefinition NftDefinition = 1; }

message NftClass {
  // id defines the unique identifier of the NFT classification, similar to the
  // contract address of ERC721
  string id = 1;

  // name defines the human-readable name of the NFT classification. Optional
  string name = 2;

  // symbol is an abbreviated name for nft classification. Optional
  string symbol = 3;

  // description is a brief description of nft classification. Optional
  string description = 4;

  // uri for the class metadata stored off chain. It can define schema for Class
  // and NFT `Data` attributes. Optional
  string uri = 5;
  // detail of nft. It is json format.
  Detail Detail = 6;
}

message NftDefinition {
  // class_id associated with the NFT, similar to the contract address of ERC721
  string class_id = 1;

  // id is a unique identifier of the NFT
  string id = 2;

  // uri for the NFT metadata stored off chain
  string uri = 3;
  Detail Detail = 4;
}